import React, { useRef, useState } from 'react';
import { UESelectionnee } from '../types';
import { exporterDonnees, importerDonnees } from '../utils/dataLoader';

interface GestionnaireDonneesProps {
  progression: Record<string, UESelectionnee>;
  onProgressionChange: (progression: Record<string, UESelectionnee>) => void;
}

const GestionnaireDonnees: React.FC<GestionnaireDonneesProps> = ({
  progression,
  onProgressionChange
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);
  const [isImporting, setIsImporting] = useState(false);

  const handleExport = () => {
    try {
      exporterDonnees(progression);
      setMessage({ type: 'success', text: 'Donn√©es export√©es avec succ√®s !' });
    } catch (error) {
      setMessage({ type: 'error', text: 'Erreur lors de l\'export des donn√©es' });
    }
    
    // Effacer le message apr√®s 3 secondes
    setTimeout(() => setMessage(null), 3000);
  };

  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsImporting(true);
    setMessage(null);

    try {
      const nouvellesDonnees = await importerDonnees(file);
      
      // Demander confirmation si des donn√©es existent d√©j√†
      const nombreUEsExistantes = Object.keys(progression).length;
      const nombreUEsImportees = Object.keys(nouvellesDonnees).length;
      
      if (nombreUEsExistantes > 0) {
        const confirmer = window.confirm(
          `Vous avez actuellement ${nombreUEsExistantes} UEs configur√©es.\n` +
          `Le fichier import√© contient ${nombreUEsImportees} UEs.\n\n` +
          `Voulez-vous remplacer vos donn√©es actuelles par celles du fichier ?`
        );
        
        if (!confirmer) {
          setIsImporting(false);
          return;
        }
      }

      onProgressionChange(nouvellesDonnees);
      setMessage({ 
        type: 'success', 
        text: `${nombreUEsImportees} UEs import√©es avec succ√®s !` 
      });
    } catch (error) {
      setMessage({ 
        type: 'error', 
        text: error instanceof Error ? error.message : 'Erreur lors de l\'import' 
      });
    } finally {
      setIsImporting(false);
      // R√©initialiser l'input file
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
    
    // Effacer le message apr√®s 5 secondes
    setTimeout(() => setMessage(null), 5000);
  };

  const handleReset = () => {
    const confirmer = window.confirm(
      '√ätes-vous s√ªr de vouloir supprimer toutes vos donn√©es ?\n' +
      'Cette action est irr√©versible.'
    );
    
    if (confirmer) {
      onProgressionChange({});
      setMessage({ type: 'success', text: 'Toutes les donn√©es ont √©t√© supprim√©es' });
      setTimeout(() => setMessage(null), 3000);
    }
  };

  const nombreUEs = Object.keys(progression).length;
  const uesSelectionnees = Object.values(progression).filter(ue => ue.statut !== 'not_selected').length;

  return (
    <div className="gestionnaire-donnees">
      <h2>Gestion des donn√©es</h2>
      
      <div className="donnees-stats">
        <div className="stat-item">
          <span className="stat-label">UEs configur√©es</span>
          <span className="stat-value">{nombreUEs}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">UEs s√©lectionn√©es</span>
          <span className="stat-value">{uesSelectionnees}</span>
        </div>
      </div>

      {message && (
        <div className={`message ${message.type}`}>
          {message.text}
        </div>
      )}

      <div className="actions-container">
        <div className="action-group">
          <h3>Exporter mes donn√©es</h3>
          <p>Sauvegardez vos donn√©es sur votre ordinateur</p>
          <button 
            onClick={handleExport}
            className="btn-export"
            disabled={nombreUEs === 0}
          >
            üì• Exporter les donn√©es
          </button>
        </div>

        <div className="action-group">
          <h3>Importer des donn√©es</h3>
          <p>Restorez des donn√©es depuis un fichier</p>
          <input
            ref={fileInputRef}
            type="file"
            accept=".json"
            onChange={handleImport}
            style={{ display: 'none' }}
          />
          <button 
            onClick={() => fileInputRef.current?.click()}
            className="btn-import"
            disabled={isImporting}
          >
            {isImporting ? '‚è≥ Import en cours...' : 'üì§ Importer des donn√©es'}
          </button>
        </div>

        <div className="action-group">
          <h3>R√©initialiser</h3>
          <p>Supprimez toutes vos donn√©es</p>
          <button 
            onClick={handleReset}
            className="btn-reset"
            disabled={nombreUEs === 0}
          >
            üóëÔ∏è Supprimer toutes les donn√©es
          </button>
        </div>
      </div>

      <div className="info-section">
        <h3>Informations</h3>
        <ul>
          <li>Les donn√©es sont sauvegard√©es automatiquement dans votre navigateur</li>
          <li>L'export cr√©e un fichier JSON que vous pouvez partager ou sauvegarder</li>
          <li>L'import remplace toutes vos donn√©es actuelles</li>
          <li>Faites une sauvegarde avant d'importer de nouvelles donn√©es</li>
        </ul>
      </div>
    </div>
  );
};

export default GestionnaireDonnees; 